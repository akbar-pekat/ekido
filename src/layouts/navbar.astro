---
import "../styles/navbar.css";
import Button from "../components/button.astro";
---

<nav>
  <div class="navContainer">
    <a class="navLogo" href="/#videosSection">
      <img src="/logo2-svg.svg" alt="Logo Ekido" />
    </a>
    <div class="hamburger">
      <span></span>
      <span></span>
    </div>
    <div class="navMenu">
      <a href="/#jasakami" class="menuItem">Jasa Kami</a>
      <a href="/#kenapaekido" class="menuItem">Kenapa Ekido?</a>
      <a href="/#testimoni" class="menuItem">Testimoni</a>
      <a href="/#tentangekido" class="menuItem">Tentang Ekido</a>
      <div class="mobileButton">
        <Button href="http://wa.link/2d3uae" color="yellow">
          Hubungi Kami
        </Button>
      </div>
    </div>
    <Button
      href="http://wa.link/2d3uae"
      color="yellow"
      showWhatsappIcon
      scaleOnHover
    >
      Hubungi Kami
    </Button>
  </div>
</nav>
<div class="overlay"></div>

<script>
  const SELECTORS = {
    HAMBURGER: ".hamburger",
    NAV_MENU: ".navMenu",
    OVERLAY: ".overlay",
    MENU_ITEM: ".menuItem",
  };
  const CLASSES = {
    ACTIVE: "active",
    NO_SCROLL: "no-scroll",
  };

  document.addEventListener("DOMContentLoaded", () => {
    initMenu();
    highlightActiveSection();
    setupSectionObserver();
    setupCleanUrl();
  });

  function initMenu() {
    const hamburger = document.querySelector(SELECTORS.HAMBURGER);
    const navMenu = document.querySelector(SELECTORS.NAV_MENU);
    const overlay = document.querySelector(SELECTORS.OVERLAY);

    if (!hamburger || !navMenu || !overlay) return;

    hamburger.addEventListener("click", toggleMenu);
    overlay.addEventListener("click", toggleMenu);

    navMenu.addEventListener("click", (e) => onNavMenuClick(e as MouseEvent));
  }

  function toggleMenu() {
    document
      .querySelector(SELECTORS.HAMBURGER)
      ?.classList.toggle(CLASSES.ACTIVE);
    document
      .querySelector(SELECTORS.NAV_MENU)
      ?.classList.toggle(CLASSES.ACTIVE);
    document.querySelector(SELECTORS.OVERLAY)?.classList.toggle(CLASSES.ACTIVE);
    document.body.classList.toggle(CLASSES.NO_SCROLL);
  }

  /**
   * Handles clicks inside the navMenu:
   * if a .menuItem (or its child) was clicked, close the menu.
   * @param {MouseEvent} event - The click event object
   */
  function onNavMenuClick(event: MouseEvent) {
    if ((event.target as Element)?.closest(SELECTORS.MENU_ITEM)) {
      closeMenu();
    }
  }

  function closeMenu() {
    document
      .querySelector(SELECTORS.HAMBURGER)
      ?.classList.remove(CLASSES.ACTIVE);
    document
      .querySelector(SELECTORS.NAV_MENU)
      ?.classList.remove(CLASSES.ACTIVE);
    document.querySelector(SELECTORS.OVERLAY)?.classList.remove(CLASSES.ACTIVE);
    document.body.classList.remove(CLASSES.NO_SCROLL);
  }

  // Fungsi untuk highlight menu aktif berdasarkan URL
  function highlightActiveSection() {
    const hash = window.location.hash;
    if (hash) {
      const sectionId = hash.substring(1); // Hapus karakter # dari awal
      setActiveMenuItem(sectionId);
    }
  }

  // Fungsi untuk mengatur menu item aktif
  function setActiveMenuItem(sectionId: string) {
    // Hapus kelas active dari semua menu item
    document.querySelectorAll(SELECTORS.MENU_ITEM).forEach((item) => {
      item.classList.remove(CLASSES.ACTIVE);
    });

    // Tambahkan kelas active ke menu item yang sesuai dengan section
    const menuItem = document.querySelector(`a[href="/#${sectionId}"]`);
    if (menuItem) {
      menuItem.classList.add(CLASSES.ACTIVE);
    }
  }

  // Fungsi untuk mengamati section yang terlihat di viewport
  function setupSectionObserver() {
    const sections: HTMLElement[] = [];
    const menuSectionIds = new Set<string>(); // Menyimpan ID section yang ada di menu
    
    document.querySelectorAll(SELECTORS.MENU_ITEM).forEach((item) => {
      const href = item.getAttribute("href");
      if (href && href.startsWith("/#")) {
        const sectionId = href.substring(2);
        menuSectionIds.add(sectionId); // Tambahkan ke Set
        const section = document.getElementById(sectionId);
        if (section) {
          sections.push(section);
        }
      }
    });

    // Tambahkan semua section lain yang tidak ada di menu navbar
    // untuk menghilangkan underline saat berada di section tersebut
    const allSections = document.querySelectorAll("section[id]");
    allSections.forEach((section) => {
      if (!menuSectionIds.has(section.id) && !sections.includes(section as HTMLElement)) {
        sections.push(section as HTMLElement);
      }
    });

    // Buat Intersection Observer untuk mengamati section
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Jika section yang terlihat adalah section yang ada di menu navbar
            if (menuSectionIds.has(entry.target.id)) {
              setActiveMenuItem(entry.target.id);
            } else {
              // Jika section yang terlihat bukan bagian dari menu navbar
              // Hapus semua underline
              document.querySelectorAll(SELECTORS.MENU_ITEM).forEach((item) => {
                item.classList.remove(CLASSES.ACTIVE);
              });
            }
          }
        });
      },
      { threshold: 0.5 }
    ); // Threshold 0.5 berarti section harus terlihat setidaknya 50%

    // Amati semua section
    sections.forEach((section) => {
      observer.observe(section);
    });
  }

  // Fungsi untuk membersihkan URL setelah navigasi
  function setupCleanUrl() {
    document.querySelectorAll(SELECTORS.MENU_ITEM).forEach((item) => {
      item.addEventListener("click", (e) => {
        // Biarkan browser melakukan scroll dulu ke section
        setTimeout(() => {
          // Ganti URL tanpa reload halaman
          history.replaceState(null, document.title, window.location.pathname);
        }, 100);
      });
    });
  }
</script>
